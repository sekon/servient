servient:- A high level overview
Please note:scriptEntry can be either a solution file or directory. For the default evaluator scriptEntry for both reference and prospective solution has to be file with executbale permission enabled)

Term : named arguments (Positional arguments)
Term : Non Option argument ( Non Positional arguments)


QID: is a used to identify each question uniquely. It can safely be assumed to resemble the file name in most cases. It is constrained to be non null and valid values cannot be -1. It should start with an alphabetic character and cannot contain one or more "/" character(s). QID is case sensetive.

Type of args to process:
 Only Non option Arguments are used:
a)only one
a1) Single directory .. the path to solution to directory to be tested.
 ($PATH)/REF is assumed to be the reference directory
 ($PATH)/META is assumed to be the meta directory
b) two arguments
b1) Both are files
   The first argument is assumed to be the reference script, the second is assumed to be solution script things are executed as is.
   basename ($REF_PATH)/META is assumed to be the meta directory.
   basename($REF_PATH)/$QUESTION_IDENTIFIER.args is assumed to be arguments directory
b2)Both are directories
The first argument is assumed to be the prospective solution directory and the second is assumed to be the reference directory directory.
   ($REF_PATH)/META is assumed to be the meta directory.
b3) First Non Option argument is a directory and the second is a file:
    User The first argument as base directory and the second one as the file to be tested (for example nose_test file or scilab test file).
b4) First Non Option argument is a file and the second is a directory:      
    Not supported.
Multiple named arguments (Positional arguments)  with the non optional arguments. For Postional arguments, please see documentation. For non optional arguments, please see above. Used for finer grain control.

by default the result is printed on screen. unless result file argument is specified.
start as root, to convert everything to absolute paths and then drop to another user. (by default it is nobody, but you could do specify an argument.

-->Inside $REF/<QID>.args/ directory
There are two mutually exclusive cases
(a) A Test template and a subsitution file
--OR--
(b) Test Script generator, used to generate any file to be used by your optional eval script. If you are using the default evaluator, then this script has to create $REF/<QID>.args/<QID>.args file.
Note 
(1)whenever the default evaluator looks into $REF/<QID>.args/ and does not find $REF/<QID>.args/<QID>.args, the Test script generator is run once to try and see if $REF/<QID>.args/<QID>.args is being created. This is done so that you can easily create test cases on the fly/change test according to SID
(2) The highest priority is to  Test template and a subsitution file, if it exists it is used.

-->The structure of META directory (directory contains scripts to customize how tests are conducted).
In $META Top level directory (for all questions),

(a) User Info script: Whether user info string is not given as command line arguments or not, return -1 to force default behaviour. QID, /full/path/to/prospective-solution/scriptEntry, [OPTIONAL] If present, "valid" user info string is if given as command line argument. The script has to return a non null string that will be used as UID for this QID, for all the remaining tests. 

(b) Match script: Used to customise the behaviour which determines which scripts are valid and which are invalid. (5 Arguments to the script:QID, UID-Of-prospective-solution-Dir, 0 if last test was successful,else -1,/full/path/to/prospective-solution/scriptEntry, /full/path/to/reference/scriptEntry. The fifth argument can be null). Return -1 to force default behavior, else reuturn a non null string. Return A null string to indicate trying the next tuple of prospective solution and reference script. You can return at most two values, if only one value is returned then by default it is assumed to point to a file that can test the prospective solution of a file using a language specific test suite for example. If two files are returned they are constrained to be absolute paths and point to valid files. The first return value is assumed to be a prospetive solution file while the second is assumed to be a reference solution file.

(c) Pretest file Run before eval script is run for each prospective solution, reference solution tuple. (4 Arguments to the script:QID, UID-Of-prospective-solution-Dir, /full/path/to/prospective-solution/scriptEntry, /full/path/to/reference/scriptEntry. The fourth argument can be null). Return value 1 to record successful pre test execution. Return value is not critical, used mainly to force log entries.
 Before Any test for any question is called, this file is called once with QID of -1 and the other remaining arguments as null entries. Then this script is recalled with the first valid QID along with other arguments as documented above.

(c) eval script, to check whether the student script passed tests. The default behavior is to compare outputs of the reference script and student script (4 Arguments to the script:QID, UID-Of-prospective-solution-Dir, /full/path/to/prospective-solution/scriptEntry, /full/path/to/reference/scriptEntry. The fourth argument can be null). Return -1 to force default behavior 1 to indicate success 0 to indicate failure and F to indicate failure (dependency error, wrong permission, faults in the operating environment,etc). 

(d) Posttest file is used to do post test cleanup for each prospective solution, reference solution tuple. (5 Arguments to the script:QID, UID-Of-prospective-solution-Dir, 0 if last test was successful,else -1,/full/path/to/prospective-solution/scriptEntry, /full/path/to/reference/scriptEntry. The fifth argument can be null). Return value 1 to record sucessful post test execution. Return value is not critical, used mainly to force log entries.
 QID of -1 is reserved for running code after all the tests and their posttest file is run. 
 After all tests for all questions are over, this file is called once again with QID of -1 and the other remaining arguments as null entries.


in $META/<QID>.extension directory (for a specific question),
(a) User Info script: Whether user info string is not given as command line arguments or not, return -1 to force default behaviour. QID, /full/path/to/prospective-solution/scriptEntry, [OPTIONAL] If present, "valid" user info string is if given as command line argument. The script has to return a non null string that will be used as UID for this QID, for all the remaining tests. 

(b) Match script: Used to customise the behaviour which determines which scripts are valid and which are invalid. (5 Arguments to the script:QID, UID-Of-prospective-solution-Dir, 0 if last test was successful,else -1,/full/path/to/prospective-solution/scriptEntry, /full/path/to/reference/scriptEntry. The fifth argument can be null). Return -1 to force default behavior, else reuturn a non null string. Return A null string to indicate trying the next tuple of prospective solution and reference script. You can return at most two values, if only one value is returned then by default it is assumed to point to a file that can test the prospective solution of a file using a language specific test suite for example. If two files are returned they are constrained to be absolute paths and point to valid files. The first return value is assumed to be a prospetive solution file while the second is assumed to be a reference solution file.

(c) a staging directory that can contain:
 (c1) A reference solution build script: is a script that can be used to build reference solution (if the reference solution is a directory). Return -1 to indicate error. Error now marked as F in result. One argument, the absolute path to the reference solution directory(not necessarily guaranteed to be a directory).
 (c2) A student solution build script: is a script that can be used to build student solution (if the student solution is a directory). Return -1 to indicate error. Error now marked as F in result. One argument, the absolute path to the student solution (not necessarily guaranteed to be a directory).
 (c3)Reference-Match script: 
  Two (known) reasons to use this (5 Arguments to the script:QID, UID-Of-prospective-solution-Dir, 0 if last test was successful,else -1,/full/path/to/prospective-solution/scriptEntry, /full/path/to/reference/scriptEntry) 
 --> The reference script is having a different file extention than the prospective solution file. (For example: The reference solution is really a test script for language foo).
 --> if the Reference script is a directory then this file is executed, to get the string bash should use as is, to execute the reference script. Return -1 for error. Very rarely needed, if you are writing your own eval script. Please return full paths (relative paths are discarded and entry marked as F). If this file does not exist the the default eval scheme assumes that the testing scripts take care of validation.
 (c4) Student-Solution-Match script: Basically if the student solution is a directory then this file is executed to get the string bash should use as is, to execute the student script. Return -1 for error. Very rarely needed if you are writing you own eval script. Only one argument  the student solution directory that is trying to be executed. Returning an empty string here, with the default eval scheme indicates F. Please return full paths (relative paths are discarded and entry marked as F). If this script does not exist and student script solution is a directory, then student scipt path is assumed to be to null.
After this if $REF/<QID>.args/ is a directory, then Test Script generator is invoked.
(d) Specialized pretest,eval and posttest files for each question in $META/<QID>.extension directory.

Note: The default evaluator gives the result as F if either the reference solution, the prospective solution or test-cases directory ($REF/<QID>.args:  $REF/<QID>.args/<QID>.args does not exist, even after execution of Test Script generator inside $REF/<QID>.args/ directory).


You need a POSIX shell with jobcontrol, which supports redirection. Tested with ash on busybox-1.12.4.
It was compiled with the following features
(a) ASH_BASH_COMPAT [=n] 
(b) ASH_JOB_CONTROL [=y]
(c) ASH_READ_NCHARS [=y]  
(d) ASH_READ_TIMEOUT [=y]
(e) ASH_ALIAS [=n]
(f) ASH_MATH_SUPPORT [=y]
(g) ASH_MATH_SUPPORT_64 [=n]
(h) ASH_GETOPTS [=y]
(i) ASH_BUILTIN_ECHO [=y]
(j) ASH_BUILTIN_PRINTF [=y]
(k) ASH_BUILTIN_TEST [=y]
(l) ASH_CMDCMD [=y]
(m) ASH_MAIL [=n]
(n) ASH_OPTIMIZE_FOR_SIZE [=y]
(o) ASH_RANDOM_SUPPORT [=y]
(p) ASH_EXPAND_PRMT [=n]
(q) HUSH [=n]
(r) LASH [=n]
(s) MSH [=n]
(t) FEATURE_SH_EXTRA_QUIET [=y]
(u) CTTYHACK [=n]
(v) STATIC [=y]

If you get a error: redefinition of ‘struct flock’ in miscutils/inotifyd.c, then either
(a) Disable inotify in busybox
(b) If "sys/inotify.h" exists on your system replace the line #include <linux/inotify.h> with #include <sys/inotify.h>

Needed binaries:
cd
ls
rm
id
grep
wc
ps
awk
sed
expr
cut 
find

			Frequently asked questions:
1)What is servient ??
	servient aims to be a small, simple, flexible and light weight black
	box unit-testing framework.

2)What is so unique about servient ??
	It aims to provide a pluggable way to primitively validate scripts
	written in multiple languages (both compiled and interpreted).

3)What is/are the use case(s) servient aims to target ??
	Currently, suppose you are an instructor in a class and have to
	validate scripts of "n" students, for a question paper containing "m"
	questions in one go.

4)You say validation .. could you elaborate ??
	Instructor provides a reference script for each of the "m" questions,
	that a student could attempt to answer along with test cases to
	validate student scripts.

5)What about security ??
	There are *NO* security features in place, you have to take necessary
	precautions (like running in a chroot with fine grained access control
	/running in a throwable VM)

6)So a validated script is guaranteed to be correct ??
	No, it is entirely dependent on the instructor provided reference
	script along with coverage of the test case(s). Providing testcase(s)
	is completly optional.

7)Does the scipt do dependency checking ?? What happens if some required
component to a "binary" is missing ??
	Well the execution fails and the attempt will be recorded.

8)Is there something i must *not* absolutely do inadvertently 
	Please read the documentation (TODO: Temp placeholder, never change the 
	working directory of the script. Please use full path names, dont 
	overwrite script variables)..

9)How can i use language specific chop suey 
	It would be very trivial to use $FEATURE .. as long as those features
	can be persistent across invocations, if not you would have to write
	a pluggable script and put it in one of the "META" scripts.
	To elaborate with an example,
	If you dont write a pluggable scirpt you cant expect a python namespace
	populated in a pre-test script to be visible during the actual test
	unless you go out of your way to make it so. 

10)AHHHH .. the lines look weird ??
	Set text width to 79 and set text wrap on (which is on by default).
	If you are using vim,
	set textwidth=80
	set wrap

11) Anything else ??
	Of course, all files are licensed under the terms of GPL3, unless
	specified otherwise.
	Project (indirectly) funded by the tax payers of the Republic of India
	XD.
